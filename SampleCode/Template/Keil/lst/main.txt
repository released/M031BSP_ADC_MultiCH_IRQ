; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=2

                  ADC_IRQHandler PROC
;;;137    
;;;138    void ADC_IRQHandler(void)
000000  4808              LDR      r0,|L1.36|
;;;139    {
;;;140    	set_flag(flag_ADC_Data_Ready,ENABLE);	
000002  68c2              LDR      r2,[r0,#0xc]  ; BitFlag
000004  2101              MOVS     r1,#1
000006  430a              ORRS     r2,r2,r1
000008  60c2              STR      r2,[r0,#0xc]  ; BitFlag
;;;141    	MONITOR_PIN = 1;
00000a  4a07              LDR      r2,|L1.40|
00000c  63d1              STR      r1,[r2,#0x3c]
;;;142    	ADC_Datax = ADC_GET_CONVERSION_DATA(ADC, ADC_TargetChannel);	
00000e  8802              LDRH     r2,[r0,#0]  ; ADC_TargetChannel
000010  4b06              LDR      r3,|L1.44|
000012  0092              LSLS     r2,r2,#2
000014  18d2              ADDS     r2,r2,r3
000016  6812              LDR      r2,[r2,#0]
000018  8042              STRH     r2,[r0,#2]
;;;143        ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT); /* Clear the A/D interrupt flag */
00001a  4804              LDR      r0,|L1.44|
00001c  3080              ADDS     r0,r0,#0x80
00001e  6101              STR      r1,[r0,#0x10]
;;;144    }
000020  4770              BX       lr
;;;145    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      ||.data||
                  |L1.40|
                          DCD      0x40004840
                  |L1.44|
                          DCD      0x40043000

                          AREA ||i.ADC_InitChannel||, CODE, READONLY, ALIGN=2

                  ADC_InitChannel PROC
;;;176    
;;;177    void ADC_InitChannel(uint8_t ch)
000000  b5f8              PUSH     {r3-r7,lr}
;;;178    {
;;;179    	set_flag(flag_ADC_Data_Ready,DISABLE);
000002  4914              LDR      r1,|L2.84|
000004  68ca              LDR      r2,[r1,#0xc]  ; BitFlag
000006  0852              LSRS     r2,r2,#1
000008  0052              LSLS     r2,r2,#1
00000a  60ca              STR      r2,[r1,#0xc]  ; BitFlag
;;;180    
;;;181    //	ADC_ReadAVdd();
;;;182    
;;;183        /* Enable ADC converter */
;;;184    //    ADC_POWER_ON(ADC);
;;;185    
;;;186        /*Wait for ADC internal power ready*/
;;;187    //    CLK_SysTickDelay(10000);
;;;188    
;;;189        /* Set input mode as single-end, and Single mode*/
;;;190        ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_SINGLE,(uint32_t) 0x1 << ch);
00000c  2601              MOVS     r6,#1
00000e  4633              MOV      r3,r6
000010  4083              LSLS     r3,r3,r0
000012  4f11              LDR      r7,|L2.88|
000014  2200              MOVS     r2,#0
000016  461d              MOV      r5,r3
000018  4611              MOV      r1,r2
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       ADC_Open
;;;191    
;;;192        /* To sample band-gap precisely, the ADC capacitor must be charged at least 3 us for charging the ADC capacitor ( Cin )*/
;;;193        /* Sampling time = extended sampling time + 1 */
;;;194        /* 1/24000000 * (Sampling time) = 3 us */
;;;195    	/*
;;;196    	    printf("+----------------------------------------------------------------------+\n");
;;;197    	    printf("|   ADC clock source -> PCLK1  = 48 MHz                                |\n");
;;;198    	    printf("|   ADC clock divider          = 2                                     |\n");
;;;199    	    printf("|   ADC clock                  = 48 MHz / 2 = 24 MHz                   |\n");
;;;200    	    printf("|   ADC extended sampling time = 71                                    |\n");
;;;201    	    printf("|   ADC conversion time = 17 + ADC extended sampling time = 88         |\n");
;;;202    	    printf("|   ADC conversion rate = 24 MHz / 88 = 272.7 ksps                     |\n");
;;;203    	    printf("+----------------------------------------------------------------------+\n");
;;;204    	*/
;;;205    
;;;206        /* Set extend sampling time based on external resistor value.*/
;;;207        ADC_SetExtendSampleTime(ADC,(uint32_t) NULL, ADCextendSampling);
000020  220a              MOVS     r2,#0xa
000022  2100              MOVS     r1,#0
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       ADC_SetExtendSampleTime
;;;208    
;;;209        /* Select ADC input channel */
;;;210        ADC_SET_INPUT_CHANNEL(ADC, 0x1 << ch);
00002a  4c0b              LDR      r4,|L2.88|
00002c  3480              ADDS     r4,r4,#0x80
00002e  6860              LDR      r0,[r4,#4]
000030  6065              STR      r5,[r4,#4]
;;;211    
;;;212    	ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
000032  6126              STR      r6,[r4,#0x10]
;;;213    	ADC_ENABLE_INT(ADC, ADC_ADF_INT);
000034  2101              MOVS     r1,#1
000036  4638              MOV      r0,r7
000038  f7fffffe          BL       ADC_EnableInt
00003c  4907              LDR      r1,|L2.92|
00003e  05a0              LSLS     r0,r4,#22
000040  6008              STR      r0,[r1,#0]
;;;214    	NVIC_EnableIRQ(ADC_IRQn);
;;;215    
;;;216        /* Start ADC conversion */
;;;217        ADC_START_CONV(ADC);
000042  6820              LDR      r0,[r4,#0]
000044  14e1              ASRS     r1,r4,#19
000046  4308              ORRS     r0,r0,r1
000048  6020              STR      r0,[r4,#0]
;;;218    	
;;;219    	MONITOR_PIN = 0;
00004a  4905              LDR      r1,|L2.96|
00004c  2000              MOVS     r0,#0
00004e  63c8              STR      r0,[r1,#0x3c]
;;;220    }
000050  bdf8              POP      {r3-r7,pc}
;;;221    
                          ENDP

000052  0000              DCW      0x0000
                  |L2.84|
                          DCD      ||.data||
                  |L2.88|
                          DCD      0x40043000
                  |L2.92|
                          DCD      0xe000e100
                  |L2.96|
                          DCD      0x40004840

                          AREA ||i.ADC_Process||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  ADC_Process PROC
;;;222    
;;;223    void ADC_Process(uint8_t state)
000000  b5f8              PUSH     {r3-r7,lr}
;;;224    {
;;;225    	uint8_t idx = 0;
000002  2400              MOVS     r4,#0
;;;226    	volatile	uint32_t sum = 0;
;;;227    	uint16_t tmp = 0;
;;;228    	
;;;229    	switch(state)
;;;230    	{
;;;231    		case State_avergage:	
;;;232    			for ( idx = 0 ; idx < ADC_CH_NUM ; idx++)
;;;233    			{
;;;234    				ADC_TargetChannel = adc_measure[idx].adc_ch;
000004  4e31              LDR      r6,|L3.204|
000006  4627              MOV      r7,r4                 ;226
000008  9400              STR      r4,[sp,#0]            ;229
00000a  2800              CMP      r0,#0                 ;229
00000c  d002              BEQ      |L3.20|
00000e  2801              CMP      r0,#1                 ;229
000010  d122              BNE      |L3.88|
000012  e022              B        |L3.90|
                  |L3.20|
000014  482e              LDR      r0,|L3.208|
000016  5d00              LDRB     r0,[r0,r4]
000018  8030              STRH     r0,[r6,#0]
;;;235    				for ( tmp = 0 ; tmp < ADC_AVG_TRAGET ; tmp++)
00001a  2500              MOVS     r5,#0
                  |L3.28|
;;;236    				{
;;;237    					ADC_InitChannel(ADC_TargetChannel);
00001c  8830              LDRH     r0,[r6,#0]  ; ADC_TargetChannel
00001e  b2c0              UXTB     r0,r0
000020  f7fffffe          BL       ADC_InitChannel
                  |L3.36|
;;;238    					while(!is_flag_set(flag_ADC_Data_Ready));
000024  68f0              LDR      r0,[r6,#0xc]  ; BitFlag
000026  07c0              LSLS     r0,r0,#31
000028  d0fc              BEQ      |L3.36|
;;;239    					MONITOR_PIN = 0;
00002a  482a              LDR      r0,|L3.212|
00002c  63c7              STR      r7,[r0,#0x3c]
;;;240    					ADC_DISABLE_INT(ADC, ADC_ADF_INT);
00002e  2101              MOVS     r1,#1
000030  4829              LDR      r0,|L3.216|
000032  f7fffffe          BL       ADC_DisableInt
;;;241    
;;;242    					sum += ADC_Datax;											//sum the first 8 ADC data
000036  8871              LDRH     r1,[r6,#2]  ; ADC_Datax
000038  9800              LDR      r0,[sp,#0]
00003a  1c6d              ADDS     r5,r5,#1
00003c  1840              ADDS     r0,r0,r1
00003e  b2ad              UXTH     r5,r5                 ;235
000040  9000              STR      r0,[sp,#0]            ;235
000042  2d08              CMP      r5,#8                 ;235
000044  d3ea              BCC      |L3.28|
;;;243    				}
;;;244    				ADC_DataArray[idx] = (uint16_t) (sum >> ADC_AVG_POW);			//do average
000046  0340              LSLS     r0,r0,#13
000048  0062              LSLS     r2,r4,#1
00004a  0c01              LSRS     r1,r0,#16
00004c  4823              LDR      r0,|L3.220|
00004e  1c64              ADDS     r4,r4,#1
000050  b2e4              UXTB     r4,r4                 ;232
000052  5281              STRH     r1,[r0,r2]
000054  2c07              CMP      r4,#7                 ;232
000056  d3dd              BCC      |L3.20|
                  |L3.88|
;;;245    			}
;;;246    
;;;247    			break;
;;;248    
;;;249    		case State_moving:
;;;250    			for ( idx = 0 ; idx < ADC_CH_NUM ; idx++)
;;;251    			{
;;;252    				ADC_TargetChannel = adc_measure[idx].adc_ch;
;;;253    				ADC_InitChannel(ADC_TargetChannel);
;;;254    				while(!is_flag_set(flag_ADC_Data_Ready));
;;;255    				MONITOR_PIN = 0;
;;;256    				ADC_DISABLE_INT(ADC, ADC_ADF_INT);
;;;257    
;;;258    				sum = ADC_DataArray[idx] << ADC_AVG_POW;					//extend the original average data
;;;259    				sum -= ADC_DataArray[idx];									//subtract the old average data
;;;260    				sum += ADC_Datax;												//add the new adc data
;;;261    				ADC_DataArray[idx] = (uint16_t) (sum >> ADC_AVG_POW);		//do average again
;;;262    			}
;;;263    
;;;264    			#if 1	// debug
;;;265    			for ( idx = 0 ; idx < ADC_CH_NUM ; idx++)
;;;266    			{
;;;267    				tmp = ADC_DataArray[idx];
;;;268    //				convertDecToBin(tmp);//ADC_DataArray[idx]
;;;269    //				printf("%d:%4dmv," , idx ,ADC_CALC_DATA_TO_VOLTAGE(ADC_DataArray[idx],ADC_REF_VOLTAGE));
;;;270    //				printf("%d:%3X,%4d ," , idx ,ADC_DataArray[idx],ADC_CALC_DATA_TO_VOLTAGE(ADC_DataArray[idx],ADC_REF_VOLTAGE));
;;;271    //				printf("%d:0x%3X," , 4 , ADC_DataArray[idx]);
;;;272    				printf("%3X:%4d ," , tmp ,ADC_CALC_DATA_TO_VOLTAGE(tmp,ADC_REF_VOLTAGE));
;;;273    //				printf("%2X:%2X ," , adc_measure[idx].adc_ch,ADC_DataArray[idx]);
;;;274    				
;;;275    				if (idx == (ADC_CH_NUM -1) )
;;;276    				{
;;;277    					printf("\r\n");
;;;278    				}				
;;;279    			}
;;;280    			#endif	
;;;281    			
;;;282    			break;
;;;283    		
;;;284    		
;;;285    	}
;;;286    	
;;;287    }
000058  bdf8              POP      {r3-r7,pc}
                  |L3.90|
00005a  481d              LDR      r0,|L3.208|
00005c  5d00              LDRB     r0,[r0,r4]            ;252
00005e  8030              STRH     r0,[r6,#0]            ;252
000060  8830              LDRH     r0,[r6,#0]            ;253  ; ADC_TargetChannel
000062  b2c0              UXTB     r0,r0                 ;253
000064  f7fffffe          BL       ADC_InitChannel
                  |L3.104|
000068  68f0              LDR      r0,[r6,#0xc]          ;254  ; BitFlag
00006a  07c0              LSLS     r0,r0,#31             ;254
00006c  d0fc              BEQ      |L3.104|
00006e  4819              LDR      r0,|L3.212|
000070  63c7              STR      r7,[r0,#0x3c]         ;255
000072  2101              MOVS     r1,#1                 ;256
000074  4818              LDR      r0,|L3.216|
000076  f7fffffe          BL       ADC_DisableInt
00007a  4d18              LDR      r5,|L3.220|
00007c  0061              LSLS     r1,r4,#1              ;258
00007e  5a68              LDRH     r0,[r5,r1]            ;258
000080  00c2              LSLS     r2,r0,#3              ;258
000082  1a10              SUBS     r0,r2,r0              ;259
000084  9000              STR      r0,[sp,#0]            ;260
000086  8872              LDRH     r2,[r6,#2]            ;260  ; ADC_Datax
000088  1c64              ADDS     r4,r4,#1              ;261
00008a  1880              ADDS     r0,r0,r2              ;260
00008c  9000              STR      r0,[sp,#0]            ;261
00008e  0340              LSLS     r0,r0,#13             ;261
000090  0c00              LSRS     r0,r0,#16             ;261
000092  b2e4              UXTB     r4,r4                 ;250
000094  5268              STRH     r0,[r5,r1]            ;261
000096  2c07              CMP      r4,#7                 ;250
000098  d3df              BCC      |L3.90|
00009a  4f11              LDR      r7,|L3.224|
00009c  2400              MOVS     r4,#0                 ;265
                  |L3.158|
00009e  0060              LSLS     r0,r4,#1              ;267
0000a0  5a2e              LDRH     r6,[r5,r0]            ;267
0000a2  4810              LDR      r0,|L3.228|
0000a4  4639              MOV      r1,r7                 ;272
0000a6  4370              MULS     r0,r6,r0              ;272
0000a8  f7fffffe          BL       __aeabi_uidivmod
0000ac  4602              MOV      r2,r0                 ;272
0000ae  4631              MOV      r1,r6                 ;272
0000b0  a00d              ADR      r0,|L3.232|
0000b2  f7fffffe          BL       __2printf
0000b6  2c06              CMP      r4,#6                 ;275
0000b8  d102              BNE      |L3.192|
0000ba  a00e              ADR      r0,|L3.244|
0000bc  f7fffffe          BL       __2printf
                  |L3.192|
0000c0  1c64              ADDS     r4,r4,#1              ;277
0000c2  b2e4              UXTB     r4,r4                 ;265
0000c4  2c07              CMP      r4,#7                 ;265
0000c6  d3ea              BCC      |L3.158|
0000c8  bdf8              POP      {r3-r7,pc}
;;;288    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L3.204|
                          DCD      ||.data||
                  |L3.208|
                          DCD      ||.constdata||
                  |L3.212|
                          DCD      0x40004840
                  |L3.216|
                          DCD      0x40043000
                  |L3.220|
                          DCD      ||.bss||
                  |L3.224|
                          DCD      0x00000fff
                  |L3.228|
                          DCD      0x00000ce4
                  |L3.232|
0000e8  2533583a          DCB      "%3X:%4d ,",0
0000ec  25346420
0000f0  2c00    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L3.244|
0000f4  0d0a00            DCB      "\r\n",0
0000f7  00                DCB      0

                          AREA ||i.ADC_ReadAVdd||, CODE, READONLY, ALIGN=2

                  ADC_ReadAVdd PROC
;;;145    
;;;146    void ADC_ReadAVdd(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;147    {
;;;148        int32_t  i32ConversionData;
;;;149        int32_t  i32BuiltInData;
;;;150    
;;;151        ADC_POWER_ON(ADC);
000002  4d22              LDR      r5,|L4.140|
000004  6828              LDR      r0,[r5,#0]
000006  2601              MOVS     r6,#1
000008  4330              ORRS     r0,r0,r6
00000a  6028              STR      r0,[r5,#0]
;;;152        CLK_SysTickDelay(10000);
00000c  4820              LDR      r0,|L4.144|
00000e  f7fffffe          BL       CLK_SysTickDelay
;;;153    
;;;154    	
;;;155        ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_SINGLE, BIT29);
000012  4f1e              LDR      r7,|L4.140|
000014  05ac              LSLS     r4,r5,#22
000016  2200              MOVS     r2,#0
000018  3f80              SUBS     r7,r7,#0x80
00001a  4623              MOV      r3,r4
00001c  4611              MOV      r1,r2
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       ADC_Open
;;;156        ADC_SetExtendSampleTime(ADC, 0, 71);
000024  2247              MOVS     r2,#0x47
000026  2100              MOVS     r1,#0
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       ADC_SetExtendSampleTime
;;;157        ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
00002e  612e              STR      r6,[r5,#0x10]
;;;158        ADC_ENABLE_INT(ADC, ADC_ADF_INT);
000030  2101              MOVS     r1,#1
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       ADC_EnableInt
000038  4816              LDR      r0,|L4.148|
00003a  6004              STR      r4,[r0,#0]
;;;159        NVIC_EnableIRQ(ADC_IRQn);
;;;160        ADC_START_CONV(ADC);
00003c  6828              LDR      r0,[r5,#0]
00003e  14a1              ASRS     r1,r4,#18
000040  4308              ORRS     r0,r0,r1
000042  6028              STR      r0,[r5,#0]
;;;161    
;;;162        ADC_DISABLE_INT(ADC, ADC_ADF_INT);
000044  2101              MOVS     r1,#1
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       ADC_DisableInt
;;;163    		
;;;164        i32ConversionData = ADC_GET_CONVERSION_DATA(ADC, 29);
00004c  480f              LDR      r0,|L4.140|
00004e  3840              SUBS     r0,r0,#0x40
000050  6b40              LDR      r0,[r0,#0x34]
000052  b285              UXTH     r5,r0
;;;165        SYS_UnlockReg();
000054  f7fffffe          BL       SYS_UnlockReg
;;;166        FMC_Open();
000058  f7fffffe          BL       FMC_Open
00005c  480e              LDR      r0,|L4.152|
00005e  2104              MOVS     r1,#4
000060  60c1              STR      r1,[r0,#0xc]
000062  2170              MOVS     r1,#0x70
000064  6041              STR      r1,[r0,#4]
000066  6106              STR      r6,[r0,#0x10]
                  |L4.104|
000068  6902              LDR      r2,[r0,#0x10]
00006a  07d1              LSLS     r1,r2,#31
00006c  d1fc              BNE      |L4.104|
00006e  6880              LDR      r0,[r0,#8]
;;;167        i32BuiltInData = FMC_ReadBandGap();	
;;;168    
;;;169    	AVdd = 3072*i32BuiltInData/i32ConversionData;
000070  2103              MOVS     r1,#3
000072  0500              LSLS     r0,r0,#20
000074  0d00              LSRS     r0,r0,#20
000076  0289              LSLS     r1,r1,#10
000078  4348              MULS     r0,r1,r0
00007a  4629              MOV      r1,r5
00007c  f7fffffe          BL       __aeabi_idivmod
000080  4906              LDR      r1,|L4.156|
000082  6088              STR      r0,[r1,#8]  ; AVdd
000084  4803              LDR      r0,|L4.148|
000086  3080              ADDS     r0,r0,#0x80
000088  6004              STR      r4,[r0,#0]
;;;170    
;;;171    //	printf("%s : %d,%d,%d\r\n",__FUNCTION__,AVdd, i32ConversionData,i32BuiltInData);
;;;172    
;;;173        NVIC_DisableIRQ(ADC_IRQn);
;;;174    	
;;;175    }
00008a  bdf8              POP      {r3-r7,pc}
;;;176    
                          ENDP

                  |L4.140|
                          DCD      0x40043080
                  |L4.144|
                          DCD      0x00002710
                  |L4.148|
                          DCD      0xe000e100
                  |L4.152|
                          DCD      0x4000c000
                  |L4.156|
                          DCD      ||.data||

                          AREA ||i.CLK_SysTickDelay||, CODE, READONLY, ALIGN=2

                  CLK_SysTickDelay PROC
;;;503      */
;;;504    __STATIC_INLINE void CLK_SysTickDelay(uint32_t us)
000000  4906              LDR      r1,|L5.28|
;;;505    {
;;;506        SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  4906              LDR      r1,|L5.32|
000008  6148              STR      r0,[r1,#0x14]
;;;507        SysTick->VAL  = (0x00);
00000a  2200              MOVS     r2,#0
00000c  618a              STR      r2,[r1,#0x18]
;;;508        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000e  2005              MOVS     r0,#5
000010  6108              STR      r0,[r1,#0x10]
                  |L5.18|
;;;509    
;;;510        /* Waiting for down-count to zero */
;;;511        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000012  6908              LDR      r0,[r1,#0x10]
000014  03c0              LSLS     r0,r0,#15
000016  d5fc              BPL      |L5.18|
;;;512    
;;;513        /* Disable SysTick counter */
;;;514        SysTick->CTRL = 0;
000018  610a              STR      r2,[r1,#0x10]
;;;515    }
00001a  4770              BX       lr
;;;516    
                          ENDP

                  |L5.28|
                          DCD      CyclesPerUs
                  |L5.32|
                          DCD      0xe000e000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;289    
;;;290    void GPIO_Init (void)
000000  b510              PUSH     {r4,lr}
;;;291    {
;;;292        GPIO_SetMode(PB, BIT14, GPIO_MODE_OUTPUT);
000002  4c06              LDR      r4,|L6.28|
000004  2201              MOVS     r2,#1
000006  0391              LSLS     r1,r2,#14
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       GPIO_SetMode
;;;293    
;;;294        GPIO_SetMode(PB, BIT15, GPIO_MODE_OUTPUT);	
00000e  2201              MOVS     r2,#1
000010  03d1              LSLS     r1,r2,#15
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       GPIO_SetMode
;;;295    }
000018  bd10              POP      {r4,pc}
;;;296    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40004040

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;342    
;;;343    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;344    {
;;;345        /* Unlock protected registers */
;;;346        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;347    
;;;348        /* Enable HIRC clock (Internal RC 48MHz) */
;;;349        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       CLK_EnableXtalRC
;;;350    //    CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
;;;351    	
;;;352        /* Wait for HIRC clock ready */
;;;353        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       CLK_WaitClockReady
;;;354    //    CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;355    	
;;;356        /* Select HCLK clock source as HIRC and HCLK source divider as 1 */
;;;357        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000012  2100              MOVS     r1,#0
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       CLK_SetHCLK
;;;358    
;;;359        /* Enable UART0 clock */
;;;360        CLK_EnableModuleClock(UART0_MODULE);
00001a  4c25              LDR      r4,|L7.176|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       CLK_EnableModuleClock
;;;361        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_PCLK0, CLK_CLKDIV0_UART0(1));
000022  2101              MOVS     r1,#1
000024  2200              MOVS     r2,#0
000026  0689              LSLS     r1,r1,#26
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       CLK_SetModuleClock
;;;362    	
;;;363        CLK_EnableModuleClock(TMR3_MODULE);
00002e  4d21              LDR      r5,|L7.180|
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       CLK_EnableModuleClock
;;;364        CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL1_TMR3SEL_PCLK1, 0);
000036  2401              MOVS     r4,#1
000038  0564              LSLS     r4,r4,#21
00003a  2200              MOVS     r2,#0
00003c  4621              MOV      r1,r4
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       CLK_SetModuleClock
;;;365    	
;;;366        CLK_EnableModuleClock(ADC_MODULE);	
000044  4d1c              LDR      r5,|L7.184|
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       CLK_EnableModuleClock
;;;367        CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL2_ADCSEL_PCLK1, CLK_CLKDIV0_ADC(3));
00004c  1122              ASRS     r2,r4,#4
00004e  4621              MOV      r1,r4
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       CLK_SetModuleClock
;;;368    
;;;369        /* Update System Core Clock */
;;;370        SystemCoreClockUpdate();
000056  f7fffffe          BL       SystemCoreClockUpdate
;;;371    
;;;372        /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;373        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk))    |       \
00005a  0260              LSLS     r0,r4,#9
00005c  6bc1              LDR      r1,[r0,#0x3c]
00005e  22ff              MOVS     r2,#0xff
000060  0412              LSLS     r2,r2,#16
000062  4391              BICS     r1,r1,r2
000064  2233              MOVS     r2,#0x33
000066  0452              LSLS     r2,r2,#17
000068  1889              ADDS     r1,r1,r2
00006a  63c1              STR      r1,[r0,#0x3c]
;;;374                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;375    
;;;376        SYS->GPB_MFPL = (SYS->GPB_MFPL &~(SYS_GPB_MFPL_PB6MFP_Msk )) \
00006c  6b81              LDR      r1,[r0,#0x38]
00006e  220f              MOVS     r2,#0xf
000070  0612              LSLS     r2,r2,#24
000072  4391              BICS     r1,r1,r2
000074  1182              ASRS     r2,r0,#6
000076  1889              ADDS     r1,r1,r2
000078  6381              STR      r1,[r0,#0x38]
;;;377                        | (SYS_GPB_MFPL_PB6MFP_ADC0_CH6 ) ;
;;;378    
;;;379        SYS->GPB_MFPL = (SYS->GPB_MFPL &~(SYS_GPB_MFPL_PB5MFP_Msk | SYS_GPB_MFPL_PB4MFP_Msk| SYS_GPB_MFPL_PB3MFP_Msk)) \
00007a  6b81              LDR      r1,[r0,#0x38]
00007c  4a0f              LDR      r2,|L7.188|
00007e  4011              ANDS     r1,r1,r2
000080  4a0f              LDR      r2,|L7.192|
000082  1889              ADDS     r1,r1,r2
000084  6381              STR      r1,[r0,#0x38]
;;;380                        | (SYS_GPB_MFPL_PB5MFP_ADC0_CH5 | SYS_GPB_MFPL_PB4MFP_ADC0_CH4| SYS_GPB_MFPL_PB3MFP_ADC0_CH3) ;
;;;381    
;;;382        SYS->GPB_MFPL = (SYS->GPB_MFPL &~(SYS_GPB_MFPL_PB2MFP_Msk | SYS_GPB_MFPL_PB1MFP_Msk| SYS_GPB_MFPL_PB0MFP_Msk)) \
000086  6b81              LDR      r1,[r0,#0x38]
000088  0b09              LSRS     r1,r1,#12
00008a  0309              LSLS     r1,r1,#12
00008c  31ff              ADDS     r1,r1,#0xff
00008e  3112              ADDS     r1,r1,#0x12
000090  6381              STR      r1,[r0,#0x38]
;;;383                        | (SYS_GPB_MFPL_PB2MFP_ADC0_CH2 | SYS_GPB_MFPL_PB1MFP_ADC0_CH1| SYS_GPB_MFPL_PB0MFP_ADC0_CH0) ;
;;;384    
;;;385        /* Set PB.0 ~ PB.3 to input mode */
;;;386        GPIO_SetMode(PB, BIT0|BIT1|BIT2|BIT3|BIT4|BIT5|BIT6, GPIO_MODE_INPUT);
000092  4c0c              LDR      r4,|L7.196|
000094  2200              MOVS     r2,#0
000096  217f              MOVS     r1,#0x7f
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       GPIO_SetMode
;;;387    
;;;388        /* Disable the PB0 ~ PB3 digital input path to avoid the leakage current. */
;;;389        GPIO_DISABLE_DIGITAL_PATH(PB, BIT0|BIT1|BIT2|BIT3|BIT4|BIT5|BIT6);
00009e  6861              LDR      r1,[r4,#4]
0000a0  227f              MOVS     r2,#0x7f
0000a2  0412              LSLS     r2,r2,#16
0000a4  4311              ORRS     r1,r1,r2
0000a6  6061              STR      r1,[r4,#4]
0000a8  4907              LDR      r1,|L7.200|
0000aa  2000              MOVS     r0,#0
0000ac  6008              STR      r0,[r1,#0]
;;;390    
;;;391    
;;;392        /* Lock protected registers */
;;;393        SYS_LockReg();
;;;394    }
0000ae  bd70              POP      {r4-r6,pc}
;;;395    
                          ENDP

                  |L7.176|
                          DCD      0x5f803d10
                  |L7.180|
                          DCD      0x5f400005
                  |L7.184|
                          DCD      0x6743fe1c
                  |L7.188|
                          DCD      0xff000fff
                  |L7.192|
                          DCD      0x00111000
                  |L7.196|
                          DCD      0x40004040
                  |L7.200|
                          DCD      0x40000100

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=2

                  SYS_UnlockReg PROC
;;;1341     */
;;;1342   __STATIC_INLINE void SYS_UnlockReg(void)
000000  b510              PUSH     {r4,lr}
;;;1343   {
;;;1344       do {
;;;1345           SYS->REGLCTL = 0x59;
000002  2159              MOVS     r1,#0x59
000004  4804              LDR      r0,|L8.24|
;;;1346           SYS->REGLCTL = 0x16;
000006  2216              MOVS     r2,#0x16
;;;1347           SYS->REGLCTL = 0x88;
000008  2388              MOVS     r3,#0x88
                  |L8.10|
00000a  6001              STR      r1,[r0,#0]            ;1345
00000c  6002              STR      r2,[r0,#0]            ;1346
00000e  6003              STR      r3,[r0,#0]
;;;1348       } while (SYS->REGLCTL == 0);
000010  6804              LDR      r4,[r0,#0]
000012  2c00              CMP      r4,#0
000014  d0f9              BEQ      |L8.10|
;;;1349   }
000016  bd10              POP      {r4,pc}
;;;1350   
                          ENDP

                  |L8.24|
                          DCD      0x40000100

                          AREA ||i.TIMER3_Init||, CODE, READONLY, ALIGN=2

                  TIMER3_Init PROC
;;;316    
;;;317    void TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;318    {
;;;319        TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L9.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
00001a  1488              ASRS     r0,r1,#18
00001c  4904              LDR      r1,|L9.48|
00001e  6008              STR      r0,[r1,#0]
000020  6820              LDR      r0,[r4,#0]
000022  0589              LSLS     r1,r1,#22
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;320        TIMER_EnableInt(TIMER3);
;;;321        NVIC_EnableIRQ(TMR3_IRQn);	
;;;322        TIMER_Start(TIMER3);
;;;323    }
000028  bd10              POP      {r4,pc}
;;;324    
                          ENDP

00002a  0000              DCW      0x0000
                  |L9.44|
                          DCD      0x40051020
                  |L9.48|
                          DCD      0xe000e100

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;297    
;;;298    void TMR3_IRQHandler(void)
000000  480a              LDR      r0,|L10.44|
000002  6881              LDR      r1,[r0,#8]
000004  07c9              LSLS     r1,r1,#31
000006  0fc9              LSRS     r1,r1,#31
;;;299    {
000008  d00f              BEQ      |L10.42|
00000a  2301              MOVS     r3,#1
00000c  6083              STR      r3,[r0,#8]
;;;300    //	static uint32_t LOG = 0;
;;;301    	static uint16_t CNT = 0;
;;;302    	
;;;303        if(TIMER_GetIntFlag(TIMER3) == 1)
;;;304        {
;;;305            TIMER_ClearIntFlag(TIMER3);
;;;306    	
;;;307    		if (CNT++ >= 1000)
00000e  4908              LDR      r1,|L10.48|
000010  8888              LDRH     r0,[r1,#4]  ; CNT
000012  1c42              ADDS     r2,r0,#1
000014  808a              STRH     r2,[r1,#4]
000016  227d              MOVS     r2,#0x7d
000018  00d2              LSLS     r2,r2,#3
00001a  4290              CMP      r0,r2
00001c  d305              BCC      |L10.42|
;;;308    		{		
;;;309    			CNT = 0;
00001e  2000              MOVS     r0,#0
000020  8088              STRH     r0,[r1,#4]
;;;310    //        	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
;;;311    			PB14 ^= 1;
000022  4804              LDR      r0,|L10.52|
000024  6b81              LDR      r1,[r0,#0x38]
000026  4059              EORS     r1,r1,r3
000028  6381              STR      r1,[r0,#0x38]
                  |L10.42|
;;;312    		}		
;;;313        }
;;;314    }
00002a  4770              BX       lr
;;;315    
                          ENDP

                  |L10.44|
                          DCD      0x40051020
                  |L10.48|
                          DCD      ||.data||
                  |L10.52|
                          DCD      0x40004840

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;325    
;;;326    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;327    {
;;;328        SYS_ResetModule(UART0_RST);
000002  4813              LDR      r0,|L11.80|
000004  f7fffffe          BL       SYS_ResetModule
;;;329    
;;;330        /* Configure UART0 and set UART0 baud rate */
;;;331        UART_Open(UART0, 115200);
000008  21e1              MOVS     r1,#0xe1
00000a  0249              LSLS     r1,r1,#9
00000c  4811              LDR      r0,|L11.84|
00000e  f7fffffe          BL       UART_Open
;;;332    
;;;333    	/* Set UART receive time-out */
;;;334    //	UART_SetTimeoutCnt(UART0, 20);
;;;335    
;;;336    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000012  f7fffffe          BL       CLK_GetCPUFreq
000016  4601              MOV      r1,r0
000018  a00f              ADR      r0,|L11.88|
00001a  f7fffffe          BL       __2printf
;;;337    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
00001e  f7fffffe          BL       CLK_GetHXTFreq
000022  4601              MOV      r1,r0
000024  a013              ADR      r0,|L11.116|
000026  f7fffffe          BL       __2printf
;;;338    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
00002a  f7fffffe          BL       CLK_GetLXTFreq
00002e  4601              MOV      r1,r0
000030  a016              ADR      r0,|L11.140|
000032  f7fffffe          BL       __2printf
;;;339    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000036  f7fffffe          BL       CLK_GetPCLK0Freq
00003a  4601              MOV      r1,r0
00003c  a019              ADR      r0,|L11.164|
00003e  f7fffffe          BL       __2printf
;;;340    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
000042  f7fffffe          BL       CLK_GetPCLK1Freq
000046  4601              MOV      r1,r0
000048  a01d              ADR      r0,|L11.192|
00004a  f7fffffe          BL       __2printf
;;;341    }
00004e  bd10              POP      {r4,pc}
;;;342    
                          ENDP

                  |L11.80|
                          DCD      0x04000010
                  |L11.84|
                          DCD      0x40070000
                  |L11.88|
000058  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
00005c  4b5f4765
000060  74435055
000064  46726571
000068  203a2025
00006c  38640d0a
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L11.116|
000074  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
000078  47657448
00007c  58544672
000080  6571203a
000084  20253864
000088  0d0a00  
00008b  00                DCB      0
                  |L11.140|
00008c  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
000090  4765744c
000094  58544672
000098  6571203a
00009c  20253864
0000a0  0d0a00  
0000a3  00                DCB      0
                  |L11.164|
0000a4  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000a8  47657450
0000ac  434c4b30
0000b0  46726571
0000b4  203a2025
0000b8  38640d0a
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L11.192|
0000c0  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000c4  47657450
0000c8  434c4b31
0000cc  46726571
0000d0  203a2025
0000d4  38640d0a
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0

                          AREA ||i.convertDecToBin||, CODE, READONLY, ALIGN=2

                  convertDecToBin PROC
;;;116    
;;;117    void convertDecToBin(int n)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;118    {
000002  b082              SUB      sp,sp,#8
;;;119        int k = 0;
000004  2500              MOVS     r5,#0
;;;120        unsigned char *p = (unsigned char*)&n;
000006  a802              ADD      r0,sp,#8
;;;121        int val2 = 0;
;;;122        int i = 0;
;;;123        for(k = 0; k <= 1; k++)
;;;124        {
;;;125            val2 = *(p+k);
;;;126            for (i = 7; i >= 0; i--)
;;;127            {
;;;128                if(val2 & (1 << i))
000008  2701              MOVS     r7,#1
00000a  9000              STR      r0,[sp,#0]
                  |L12.12|
00000c  9800              LDR      r0,[sp,#0]            ;125
00000e  2407              MOVS     r4,#7                 ;126
000010  5d46              LDRB     r6,[r0,r5]            ;125
                  |L12.18|
000012  4638              MOV      r0,r7
000014  40a0              LSLS     r0,r0,r4
000016  4230              TST      r0,r6
000018  d001              BEQ      |L12.30|
;;;129                    printf("1");
00001a  a007              ADR      r0,|L12.56|
00001c  e000              B        |L12.32|
                  |L12.30|
;;;130                else
;;;131                    printf("0");
00001e  a007              ADR      r0,|L12.60|
                  |L12.32|
000020  f7fffffe          BL       __2printf
000024  1e64              SUBS     r4,r4,#1
000026  d5f4              BPL      |L12.18|
;;;132            }
;;;133            printf(" ");
000028  a005              ADR      r0,|L12.64|
00002a  f7fffffe          BL       __2printf
00002e  1c6d              ADDS     r5,r5,#1
000030  2d01              CMP      r5,#1                 ;123
000032  ddeb              BLE      |L12.12|
;;;134        }
;;;135    }
000034  bdfe              POP      {r1-r7,pc}
;;;136    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
000038  3100              DCB      "1",0
00003a  00                DCB      0
00003b  00                DCB      0
                  |L12.60|
00003c  3000              DCB      "0",0
00003e  00                DCB      0
00003f  00                DCB      0
                  |L12.64|
000040  2000              DCB      " ",0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;403    
;;;404    int main()
000000  f7fffffe          BL       SYS_Init
;;;405    {
;;;406        SYS_Init();
;;;407    
;;;408        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;409    	GPIO_Init();
000008  f7fffffe          BL       GPIO_Init
;;;410    	TIMER3_Init();
00000c  f7fffffe          BL       TIMER3_Init
;;;411    	
;;;412        /* Enable ADC converter */
;;;413        ADC_POWER_ON(ADC);
000010  4806              LDR      r0,|L13.44|
000012  6801              LDR      r1,[r0,#0]
000014  2201              MOVS     r2,#1
000016  4311              ORRS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;414    
;;;415        /*Wait for ADC internal power ready*/
;;;416        CLK_SysTickDelay(10000);
00001a  4805              LDR      r0,|L13.48|
00001c  f7fffffe          BL       CLK_SysTickDelay
;;;417    
;;;418    	ADC_Process(State_avergage);
000020  2000              MOVS     r0,#0
                  |L13.34|
000022  f7fffffe          BL       ADC_Process
;;;419    
;;;420        /* Got no where to go, just loop forever */
;;;421        while(1)
;;;422        {
;;;423    		ADC_Process(State_moving);
000026  2001              MOVS     r0,#1
000028  e7fb              B        |L13.34|
;;;424    		
;;;425        }
;;;426    }
;;;427    
                          ENDP

00002a  0000              DCW      0x0000
                  |L13.44|
                          DCD      0x40043080
                  |L13.48|
                          DCD      0x00002710

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ADC_DataArray
                          %        14

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  adc_measure
000000  00010203          DCB      0x00,0x01,0x02,0x03
000004  04050610          DCB      0x04,0x05,0x06,0x10

                          AREA ||.data||, DATA, ALIGN=2

                  ADC_TargetChannel
000000  0000              DCW      0x0000
                  ADC_Datax
000002  0000              DCW      0x0000
                  ||CNT||
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  AVdd
                          DCD      0x00000000
                  BitFlag
                          DCD      0x00000000

                          AREA ||area_number.19||, DATA, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.data||
                  ADC_CH_TypeDef
000000  00                DCB      0x00

                          AREA ||area_number.20||, DATA, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.data||
                  ADC_State
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_d652c64e____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_d652c64e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_d652c64e____REVSH|
#line 402
|__asm___6_main_c_d652c64e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
